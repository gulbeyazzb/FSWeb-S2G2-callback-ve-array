const { fifaData } = require("./fifa.js");

/* GÃ¶rev 1: 
	Verilen datayÄ± parÃ§alayarak aÅŸaÄŸÄ±daki verileri (console.log-ing) elde ederek pratik yapÄ±n. 
	
	ðŸ’¡ Ä°PUCU: Ã–ncelikle datayÄ± filtrelemek isteyebilirsiniz */

//(a) 2014 DÃ¼nya kupasÄ± Finali Evsahibi takÄ±m ismi (dizide "Home Team Name" anahtarÄ±)
const final2014 = fifaData.find((i) => {
  return i.Year === 2014 && i.Stage === "Final";
});
//console.log(final2014["Home Team Name"]);
//(b) 2014 DÃ¼nya kupasÄ± Finali Deplasman takÄ±m ismi  (dizide "Away Team Name" anahtarÄ±)

// console.log(final2014["Away Team Name"]);
//(c) 2014 DÃ¼nya kupasÄ± finali Ev sahibi takÄ±m golleri (dizide "Home Team Goals" anahtarÄ±)

// console.log(final2014["Home Team Goals"]);
//(d)2014 DÃ¼nya kupasÄ± finali Deplasman takÄ±m golleri  (dizide "Away Team Goals" anahtarÄ±)
// console.log(final2014["Away Team Goals"]);
//(e) 2014 DÃ¼nya kupasÄ± finali kazananÄ±*/
let winner = "";
if (final2014["Home Team Goals"] > final2014["Away Team Goals"]) {
  winner = final2014["Home Team Name"];
} else {
  winner = final2014["Away Team Name"];
}
//console.log(winner);
/*  GÃ¶rev 2: 
	Finaller adlÄ± fonksiyonu kullanarak aÅŸaÄŸÄ±dakileri uygulayÄ±n:
	1. Bir dizi(array) olan Fifa datasÄ±nÄ± fonksiyonun birinci parametresi olarak alacak
	2. Sadece final maÃ§larÄ±nÄ± iÃ§eren nesnenin(object) datalarÄ±nÄ± filtreleyerek, bir dizi olarak dÃ¶ndÃ¼recek(return)
	
	ðŸ’¡ Ä°PUCU - verilen data iÃ§indeki nesnelerin(objects) "Stage" anahtarÄ±na bakmalÄ±sÄ±nÄ±z
*/

function Finaller(arrFifa) {
  const finals = arrFifa.filter((data) => {
    return data.Stage == "Final";
  });
  return finals;
}
//console.log(Finaller(fifaData));
/*  GÃ¶rev 3: 
	Bir higher-order fonksiyonu olan Yillar isimli fonksiyona aÅŸaÄŸÄ±dakileri uygulayÄ±n: 
	1. fifaData dizisini(array) fonksiyonun birinci parametresi olarak alacak
	2. GÃ¶rev 2'de yazdÄ±ÄŸÄ±nÄ±z Finaller fonksiyonunu, geriÃ§aÄŸÄ±rÄ±m(callback) olarak fonksiyonun ikinci parametresi olarak alacak
	3. Finaller data setindeki tÃ¼m yÄ±llarÄ± iÃ§eren "years" adÄ±ndaki diziyi(array) dÃ¶ndÃ¼recek
	*/

function Yillar(arrFifa, callback) {
  const years = callback(arrFifa).map((year) => {
    return year.Year;
  });
  return years;
}
//console.log(Yillar(fifaData, Finaller));
/*  GÃ¶rev 4: 
	Bir higher-order fonksiyonunu olan Kazananlar isimli fonksiyona aÅŸaÄŸÄ±dakileri uygulayÄ±n:  
	1. fifaData dizisini(array) fonksiyonunun birinci parametresi olarak alacak
	2. GÃ¶rev 2'de yazdÄ±ÄŸÄ±nÄ±z Finaller fonksiyonunu, geriÃ§aÄŸÄ±rÄ±m(callback) olarak fonksiyonun ikinci parametresi olarak alacak
	3. Her final maÃ§Ä±nÄ±n kazananÄ±nÄ± (evsahibi ya da deplasman) belirleyecek
	ðŸ’¡ Ä°PUCU: Beraberlikler(ties) iÃ§in ÅŸimdilik endiÅŸelenmeyin (DetaylÄ± bilgi iÃ§in README dosyasÄ±na bakabilirsiniz.)
	4. TÃ¼m kazanan Ã¼lkelerin isimlerini iÃ§eren `kazananlar` adÄ±nda bir dizi(array) dÃ¶ndÃ¼recek(return)  */

function Kazananlar(arrFifa, callback) {
  const winners = callback(arrFifa).map((winner) => {
    return winner["Home Team Goals"] > winner["Away Team Goals"]
      ? winner["Home Team Name"]
      : winner["Away Team Name"];
  });
  return winners;
}
//console.log(Kazananlar(fifaData, Finaller));
/*  GÃ¶rev 5: 
	Bir higher-order fonksiyonu olan YillaraGoreKazananlar isimli fonksiyona aÅŸaÄŸÄ±dakileri uygulayÄ±n:
	1. fifaData dizisini(array) fonksiyonunun birinci parametresi olarak alacak
	2. GÃ¶rev 2'de yazdÄ±ÄŸÄ±nÄ±z Finaller fonksiyonunu, geriÃ§aÄŸÄ±rÄ±m(callback) olarak fonksiyonun ikinci parametresi olarak alacak
	3. GÃ¶rev 3'de yazdÄ±ÄŸÄ±nÄ±z Yillar fonksiyonunu, geriÃ§aÄŸÄ±rÄ±m(callback) olarak fonksiyonun Ã¼Ã§Ã¼ncÃ¼ parametresi olarak alacak
	4. GÃ¶rev 4'de yazdÄ±ÄŸÄ±nÄ±z Kazananlar fonksiyonunu, geriÃ§aÄŸÄ±rÄ±m(callback) olarak fonksiyonun dÃ¶rdÃ¼ncÃ¼ parametresi olarak alacak
	5. Her yÄ±l iÃ§in "{yÄ±l} yÄ±lÄ±nda, {Ã¼lke} dÃ¼nya kupasÄ±nÄ± kazandÄ±!" cÃ¼mlesini(string) iÃ§eren bir diziyi(array) dÃ¶ndÃ¼recek
	
	ðŸ’¡ Ä°PUCU: her cÃ¼mlenin adÄ±m 4'te belirtilen cÃ¼mleyle birebir aynÄ± olmasÄ± gerekmektedir.
*/

function YillaraGoreKazananlar(
  arrFifa,
  cbk_finaller,
  cbk_yillar,
  cbk_kazananlar
) {
  const yillar = cbk_yillar(arrFifa, cbk_finaller);
  const ulkeler = cbk_kazananlar(arrFifa, cbk_finaller);
  let i = 0;
  const yillaraGoreKazananlar = yillar.reduce((total, yil) => {
    total.push(`${yil} yÄ±lÄ±nda, ${ulkeler[i++]} dÃ¼nya kupasÄ±nÄ± kazandÄ±!`);
    return total;
  }, []);
  return yillaraGoreKazananlar;
}
// console.log(YillaraGoreKazananlar(fifaData, Finaller, Yillar, Kazananlar));
/*  GÃ¶rev 6: 
	Bir higher order fonksiyonu olan `OrtalamaGolSayisi` isimli fonksiyona aÅŸaÄŸÄ±dakileri uygulayÄ±n: 
	1. GÃ¶rev 2'de yazdÄ±ÄŸÄ±nÄ±z `Finaller` fonksiyonunu birinci parametre olarak alacak; 'fifaData' dizisini argÃ¼man olarak eklediÄŸinizden emin olun
	
	ðŸ’¡ Ä°PUCU: Ã‡aÄŸÄ±rma Ã¶rneÄŸi: `OrtalamaGolSayisi(Finaller(fifaData));`
	
	2. Her maÃ§ iÃ§in Ortalama toplam evsahibi gol sayÄ±sÄ± ve toplam deplasman gol sayÄ±sÄ±nÄ± hesaplayacak (her maÃ§ta atÄ±lan toplam gol sayÄ±sÄ±)
	
	3. Sonucun 2. ondalÄ±ÄŸÄ±nÄ± yuvarlayÄ±p, bulunan deÄŸeri dÃ¶ndÃ¼recek(return)
	
	ðŸ’¡ Ä°PUCU: .reduce, .toFixed (dizilim(syntax) iÃ§in MDN'ye bakÄ±n) kullan, ve bunu 2 adÄ±mda yapÄ±n) 
	
*/

function OrtalamaGolSayisi(Finaller) {
  const gameCount = Finaller.length; // "Final" olarak oynanan tÃ¼m maÃ§ sayÄ±sÄ± bir deÄŸiÅŸkene atanÄ±r.
  const totalGoals = Finaller.reduce((total, game) => {
    //reduce ile Final maÃ§larÄ±ndaki gol sayÄ±larÄ± bir deÄŸiÅŸkende toplanÄ±r.
    return total + game["Home Team Goals"] + game["Away Team Goals"];
  }, 0);
  const avarage = totalGoals / gameCount; //Toplam gol sayÄ±sÄ± toplam maÃ§ sayÄ±sÄ±na bÃ¶lÃ¼nerek ortalamasÄ± bulunur.
  return avarage.toFixed(2); //Parantez iÃ§ine belirtilen {2} deÄŸeri ile toFixed metodu kÃ¼sÃ¼ratlÄ± sayÄ±larÄ±n virgÃ¼lden sonra kaÃ§ hane gÃ¶sterileceÄŸini belirtmiÅŸ olur.
}
// console.log(OrtalamaGolSayisi(Finaller(fifaData)));
/// EKSTRA Ã‡ALIÅžMALAR ///

/*  BONUS 1:  
	`UlkelerinKazanmaSayilari` isminde bir fonksiyon oluÅŸturun, parametre olarak `data` ve `takÄ±m kÄ±saltmalarÄ±nÄ±` alacak ve hangi Ã¼lkenin kaÃ§ dÃ¼nya kupasÄ± olduÄŸunu dÃ¶ndÃ¼recek
	
	Ä°pucu: "takÄ±m kÄ±saltmalarÄ±" (team initials) iÃ§in datada araÅŸtÄ±rma yapÄ±n!
Ä°pucu: `.reduce` KullanÄ±n*/

function KazananKisaltmalari(arrFifa, callback) {
  const winners = callback(arrFifa).map((winner) => {
    return winner["Home Team Goals"] > winner["Away Team Goals"]
      ? winner["Home Team Initials"]
      : winner["Away Team Initials"];
  });
  return winners;
}
function UlkelerinKazanmaSayilari(data) {
  let result = {};
  for (let i = 0; i < data.length; i++) {
    if (result[data[i]] == undefined) {
      result[data[i]] = 1;
    } else {
      result[data[i]] += 1;
    }
  }
  return result;
}
console.log(UlkelerinKazanmaSayilari(KazananKisaltmalari(fifaData, Finaller)));
/*  BONUS 2:  
EnCokGolAtan() isminde bir fonksiyon yazÄ±n, `data` yÄ± parametre olarak alsÄ±n ve DÃ¼nya kupasÄ± finallerinde en Ã§ok gol atan takÄ±mÄ± dÃ¶ndÃ¼rsÃ¼n */

function EnCokGolAtan(/* kodlar buraya */) {
  /* kodlar buraya */
}

/*  BONUS 3: 
EnKotuDefans() adÄ±nda bir fonksiyon yazÄ±n, `data` yÄ± parametre olarak alsÄ±n ve DÃ¼nya kupasÄ±nda finallerinde en Ã§ok golÃ¼ yiyen takÄ±mÄ± dÃ¶ndÃ¼rsÃ¼n*/

function EnKotuDefans(/* kodlar buraya */) {
  /* kodlar buraya */
}

/* Hala vaktiniz varsa, README dosyasÄ±nda listelenen hedeflerden istediÄŸinizi aÅŸaÄŸÄ±daki boÅŸluÄŸa yazabilirsiniz. */

/* Bu satÄ±rÄ±n aÅŸaÄŸÄ±sÄ±ndaki kodlarÄ± lÃ¼tfen deÄŸiÅŸtirmeyin */
function sa() {
  console.log("Kodlar Ã§alÄ±ÅŸÄ±yor");
  return "as";
}
sa();
module.exports = {
  sa,
  Finaller,
  Yillar,
  Kazananlar,
  YillaraGoreKazananlar,
  OrtalamaGolSayisi,
};
